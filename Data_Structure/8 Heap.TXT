#include<stdio.h>
#include<stdlib.h>
#include<string.h>

#define MAX 100

/*히프에 대한 1차원 배열과 히츠 원소의 개수를 구조체로 묶어서 선언*/
typedef int DATA;
typedef struct {
	DATA heap[MAX];
	DATA heap_size;
}heapType;

heapType* createHeap();
void insertHeap(heapType *h, DATA item,FILE *out);
DATA deleteHeap(heapType *h);
void printHeap(heapType *h,FILE *out);
DATA heapFind(heapType *h,DATA item);
/*공백 히프를 생성하는 연산*/
heapType* createHeap(){
	
	heapType *h = (heapType*)malloc(sizeof(heapType));
	h->heap_size = 0;
}
/*히프에 item을 삽입하는 연산 */
void insertHeap(heapType *h, DATA item,FILE *out){
	DATA i;
	
	h->heap_size = h->heap_size +1;
	i = h->heap_size;
	
	
	
	while((i != 1)&& (item > h->heap[i/2])){
	
		h->heap[i] = h->heap[i/2];
		i /= 2;
	}
	
	
	
	h->heap[i] = item;
	
	fprintf(out,"insert %d\n",item);
	
}
/*히프의 루트를 삭제하여 반환하는 연산 */
DATA deleteHeap(heapType *h){
	
	DATA parent,child;
	DATA item, temp;
	
	item = h->heap[1];
	temp = h->heap[h->heap_size];
	h->heap_size = h->heap_size - 1;
	
	parent = 1;
	child = 2;
	
	while(child <= h->heap_size){
		if((child< h->heap_size)&&(h->heap[child])<h->heap[child +1])
		child++;
		if(temp>= h->heap[child])break;
		else{
			h->heap[parent] = h->heap[child];
			parent = child;
			child = child * 2;
			
		}
	}
	h->heap[parent] = temp;
	return item;
}
/*히프 배열에 있는 item을 찾는 연산(못찾으면 -1값으로 return)*/
DATA heapFind(heapType *h,DATA item){
	DATA i;
	for(i=0;i<h->heap_size;i++){
		if(h->heap[i]==item)
		return item;
	}
	return -1;
	
}
/*1차원 배열 히프의 내용을 출력하는 연산*/
void printHeap(heapType *h,FILE *out){
	DATA i;
	for(i=1; i<=h->heap_size;i++)
	fprintf(out,"%d ",h->heap[i]);
	
}

DATA main(){
	FILE *in = fopen("input.txt","r");
	FILE *out = fopen("output.txt","w");
	
	DATA i,j,n,item,Find;
	
	heapType *heap =createHeap();
	
	char command[10];
	
	while(!feof(in)){
		
		fscanf(in,"%s",command);
		
		if(strcmp(command,"i")==0){
			fscanf(in,"%d",&i);
		
		if(heap->heap[4]==i)
		fprintf(out,"%d is already in the heap\n",i);
	
		else
	    insertHeap(heap,i,out);
		}
		else if(strcmp(command,"f")==0){
			fscanf(in,"%d",&i);
			
			Find = heapFind(heap,i);
			
			if (Find != -1)
			fprintf(out,"%d is in the heap\n",i);
			else
			fprintf(out,"%d is not in the heap\n",i);
						
		}
		else if(strcmp(command,"p")==0){
			printHeap(heap,out);
			
		}
		
	}
}
